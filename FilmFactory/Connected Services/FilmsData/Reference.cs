//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FilmFactory.FilmsData {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilmContract", Namespace="http://schemas.datacontract.org/2004/07/TestService.DataContract")]
    [System.SerializableAttribute()]
    public partial class FilmContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DirectorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FilmFactory.FilmsData.GenreContract[] GenreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DirectorId {
            get {
                return this.DirectorIdField;
            }
            set {
                if ((this.DirectorIdField.Equals(value) != true)) {
                    this.DirectorIdField = value;
                    this.RaisePropertyChanged("DirectorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FilmFactory.FilmsData.GenreContract[] Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreField, value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoName {
            get {
                return this.PhotoNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoNameField, value) != true)) {
                    this.PhotoNameField = value;
                    this.RaisePropertyChanged("PhotoName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenreContract", Namespace="http://schemas.datacontract.org/2004/07/TestService.DataContract")]
    [System.SerializableAttribute()]
    public partial class GenreContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenreNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenreName {
            get {
                return this.GenreNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreNameField, value) != true)) {
                    this.GenreNameField = value;
                    this.RaisePropertyChanged("GenreName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectorContract", Namespace="http://schemas.datacontract.org/2004/07/TestService.DataContract")]
    [System.SerializableAttribute()]
    public partial class DirectorContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Director {
            get {
                return this.DirectorField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectorField, value) != true)) {
                    this.DirectorField = value;
                    this.RaisePropertyChanged("Director");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FilmsData.IFilmDataService")]
    public interface IFilmDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/CheckConnection", ReplyAction="http://tempuri.org/IFilmDataService/CheckConnectionResponse")]
        string CheckConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/CheckConnection", ReplyAction="http://tempuri.org/IFilmDataService/CheckConnectionResponse")]
        System.Threading.Tasks.Task<string> CheckConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetFilms", ReplyAction="http://tempuri.org/IFilmDataService/GetFilmsResponse")]
        FilmFactory.FilmsData.FilmContract[] GetFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetFilms", ReplyAction="http://tempuri.org/IFilmDataService/GetFilmsResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.FilmContract[]> GetFilmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/AddFilm", ReplyAction="http://tempuri.org/IFilmDataService/AddFilmResponse")]
        void AddFilm(FilmFactory.FilmsData.FilmContract film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/AddFilm", ReplyAction="http://tempuri.org/IFilmDataService/AddFilmResponse")]
        System.Threading.Tasks.Task AddFilmAsync(FilmFactory.FilmsData.FilmContract film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/UpdateFilm", ReplyAction="http://tempuri.org/IFilmDataService/UpdateFilmResponse")]
        void UpdateFilm(FilmFactory.FilmsData.FilmContract film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/UpdateFilm", ReplyAction="http://tempuri.org/IFilmDataService/UpdateFilmResponse")]
        System.Threading.Tasks.Task UpdateFilmAsync(FilmFactory.FilmsData.FilmContract film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/DeleteFilm", ReplyAction="http://tempuri.org/IFilmDataService/DeleteFilmResponse")]
        void DeleteFilm(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/DeleteFilm", ReplyAction="http://tempuri.org/IFilmDataService/DeleteFilmResponse")]
        System.Threading.Tasks.Task DeleteFilmAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetFilmById", ReplyAction="http://tempuri.org/IFilmDataService/GetFilmByIdResponse")]
        FilmFactory.FilmsData.FilmContract GetFilmById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetFilmById", ReplyAction="http://tempuri.org/IFilmDataService/GetFilmByIdResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.FilmContract> GetFilmByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetGenres", ReplyAction="http://tempuri.org/IFilmDataService/GetGenresResponse")]
        FilmFactory.FilmsData.GenreContract[] GetGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetGenres", ReplyAction="http://tempuri.org/IFilmDataService/GetGenresResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.GenreContract[]> GetGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/AddGenre", ReplyAction="http://tempuri.org/IFilmDataService/AddGenreResponse")]
        void AddGenre(FilmFactory.FilmsData.GenreContract genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/AddGenre", ReplyAction="http://tempuri.org/IFilmDataService/AddGenreResponse")]
        System.Threading.Tasks.Task AddGenreAsync(FilmFactory.FilmsData.GenreContract genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/UpdateGenre", ReplyAction="http://tempuri.org/IFilmDataService/UpdateGenreResponse")]
        void UpdateGenre(FilmFactory.FilmsData.GenreContract genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/UpdateGenre", ReplyAction="http://tempuri.org/IFilmDataService/UpdateGenreResponse")]
        System.Threading.Tasks.Task UpdateGenreAsync(FilmFactory.FilmsData.GenreContract genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/DeleteGenre", ReplyAction="http://tempuri.org/IFilmDataService/DeleteGenreResponse")]
        void DeleteGenre(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/DeleteGenre", ReplyAction="http://tempuri.org/IFilmDataService/DeleteGenreResponse")]
        System.Threading.Tasks.Task DeleteGenreAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetGenreById", ReplyAction="http://tempuri.org/IFilmDataService/GetGenreByIdResponse")]
        FilmFactory.FilmsData.GenreContract GetGenreById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetGenreById", ReplyAction="http://tempuri.org/IFilmDataService/GetGenreByIdResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.GenreContract> GetGenreByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetDirector", ReplyAction="http://tempuri.org/IFilmDataService/GetDirectorResponse")]
        FilmFactory.FilmsData.DirectorContract[] GetDirector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetDirector", ReplyAction="http://tempuri.org/IFilmDataService/GetDirectorResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.DirectorContract[]> GetDirectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/AddDirector", ReplyAction="http://tempuri.org/IFilmDataService/AddDirectorResponse")]
        void AddDirector(FilmFactory.FilmsData.DirectorContract director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/AddDirector", ReplyAction="http://tempuri.org/IFilmDataService/AddDirectorResponse")]
        System.Threading.Tasks.Task AddDirectorAsync(FilmFactory.FilmsData.DirectorContract director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/UpdateDirector", ReplyAction="http://tempuri.org/IFilmDataService/UpdateDirectorResponse")]
        void UpdateDirector(FilmFactory.FilmsData.DirectorContract director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/UpdateDirector", ReplyAction="http://tempuri.org/IFilmDataService/UpdateDirectorResponse")]
        System.Threading.Tasks.Task UpdateDirectorAsync(FilmFactory.FilmsData.DirectorContract director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/DeleteDirector", ReplyAction="http://tempuri.org/IFilmDataService/DeleteDirectorResponse")]
        void DeleteDirector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/DeleteDirector", ReplyAction="http://tempuri.org/IFilmDataService/DeleteDirectorResponse")]
        System.Threading.Tasks.Task DeleteDirectorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetDirectorById", ReplyAction="http://tempuri.org/IFilmDataService/GetDirectorByIdResponse")]
        FilmFactory.FilmsData.DirectorContract GetDirectorById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetDirectorById", ReplyAction="http://tempuri.org/IFilmDataService/GetDirectorByIdResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.DirectorContract> GetDirectorByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetTop20Films", ReplyAction="http://tempuri.org/IFilmDataService/GetTop20FilmsResponse")]
        FilmFactory.FilmsData.FilmContract[] GetTop20Films();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilmDataService/GetTop20Films", ReplyAction="http://tempuri.org/IFilmDataService/GetTop20FilmsResponse")]
        System.Threading.Tasks.Task<FilmFactory.FilmsData.FilmContract[]> GetTop20FilmsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilmDataServiceChannel : FilmFactory.FilmsData.IFilmDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilmDataServiceClient : System.ServiceModel.ClientBase<FilmFactory.FilmsData.IFilmDataService>, FilmFactory.FilmsData.IFilmDataService {
        
        public FilmDataServiceClient() {
        }
        
        public FilmDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FilmDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilmDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilmDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CheckConnection() {
            return base.Channel.CheckConnection();
        }
        
        public System.Threading.Tasks.Task<string> CheckConnectionAsync() {
            return base.Channel.CheckConnectionAsync();
        }
        
        public FilmFactory.FilmsData.FilmContract[] GetFilms() {
            return base.Channel.GetFilms();
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.FilmContract[]> GetFilmsAsync() {
            return base.Channel.GetFilmsAsync();
        }
        
        public void AddFilm(FilmFactory.FilmsData.FilmContract film) {
            base.Channel.AddFilm(film);
        }
        
        public System.Threading.Tasks.Task AddFilmAsync(FilmFactory.FilmsData.FilmContract film) {
            return base.Channel.AddFilmAsync(film);
        }
        
        public void UpdateFilm(FilmFactory.FilmsData.FilmContract film) {
            base.Channel.UpdateFilm(film);
        }
        
        public System.Threading.Tasks.Task UpdateFilmAsync(FilmFactory.FilmsData.FilmContract film) {
            return base.Channel.UpdateFilmAsync(film);
        }
        
        public void DeleteFilm(int id) {
            base.Channel.DeleteFilm(id);
        }
        
        public System.Threading.Tasks.Task DeleteFilmAsync(int id) {
            return base.Channel.DeleteFilmAsync(id);
        }
        
        public FilmFactory.FilmsData.FilmContract GetFilmById(int id) {
            return base.Channel.GetFilmById(id);
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.FilmContract> GetFilmByIdAsync(int id) {
            return base.Channel.GetFilmByIdAsync(id);
        }
        
        public FilmFactory.FilmsData.GenreContract[] GetGenres() {
            return base.Channel.GetGenres();
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.GenreContract[]> GetGenresAsync() {
            return base.Channel.GetGenresAsync();
        }
        
        public void AddGenre(FilmFactory.FilmsData.GenreContract genre) {
            base.Channel.AddGenre(genre);
        }
        
        public System.Threading.Tasks.Task AddGenreAsync(FilmFactory.FilmsData.GenreContract genre) {
            return base.Channel.AddGenreAsync(genre);
        }
        
        public void UpdateGenre(FilmFactory.FilmsData.GenreContract genre) {
            base.Channel.UpdateGenre(genre);
        }
        
        public System.Threading.Tasks.Task UpdateGenreAsync(FilmFactory.FilmsData.GenreContract genre) {
            return base.Channel.UpdateGenreAsync(genre);
        }
        
        public void DeleteGenre(int id) {
            base.Channel.DeleteGenre(id);
        }
        
        public System.Threading.Tasks.Task DeleteGenreAsync(int id) {
            return base.Channel.DeleteGenreAsync(id);
        }
        
        public FilmFactory.FilmsData.GenreContract GetGenreById(int id) {
            return base.Channel.GetGenreById(id);
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.GenreContract> GetGenreByIdAsync(int id) {
            return base.Channel.GetGenreByIdAsync(id);
        }
        
        public FilmFactory.FilmsData.DirectorContract[] GetDirector() {
            return base.Channel.GetDirector();
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.DirectorContract[]> GetDirectorAsync() {
            return base.Channel.GetDirectorAsync();
        }
        
        public void AddDirector(FilmFactory.FilmsData.DirectorContract director) {
            base.Channel.AddDirector(director);
        }
        
        public System.Threading.Tasks.Task AddDirectorAsync(FilmFactory.FilmsData.DirectorContract director) {
            return base.Channel.AddDirectorAsync(director);
        }
        
        public void UpdateDirector(FilmFactory.FilmsData.DirectorContract director) {
            base.Channel.UpdateDirector(director);
        }
        
        public System.Threading.Tasks.Task UpdateDirectorAsync(FilmFactory.FilmsData.DirectorContract director) {
            return base.Channel.UpdateDirectorAsync(director);
        }
        
        public void DeleteDirector(int id) {
            base.Channel.DeleteDirector(id);
        }
        
        public System.Threading.Tasks.Task DeleteDirectorAsync(int id) {
            return base.Channel.DeleteDirectorAsync(id);
        }
        
        public FilmFactory.FilmsData.DirectorContract GetDirectorById(int id) {
            return base.Channel.GetDirectorById(id);
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.DirectorContract> GetDirectorByIdAsync(int id) {
            return base.Channel.GetDirectorByIdAsync(id);
        }
        
        public FilmFactory.FilmsData.FilmContract[] GetTop20Films() {
            return base.Channel.GetTop20Films();
        }
        
        public System.Threading.Tasks.Task<FilmFactory.FilmsData.FilmContract[]> GetTop20FilmsAsync() {
            return base.Channel.GetTop20FilmsAsync();
        }
    }
}
