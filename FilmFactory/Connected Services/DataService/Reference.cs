//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FilmFactory.DataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="film", Namespace="http://schemas.datacontract.org/2004/07/Films.DOL.Model")]
    [System.SerializableAttribute()]
    public partial class film : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DirectorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FilmFactory.DataService.film_genre[] film_genreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DirectorId {
            get {
                return this.DirectorIdField;
            }
            set {
                if ((this.DirectorIdField.Equals(value) != true)) {
                    this.DirectorIdField = value;
                    this.RaisePropertyChanged("DirectorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FilmFactory.DataService.film_genre[] film_genre {
            get {
                return this.film_genreField;
            }
            set {
                if ((object.ReferenceEquals(this.film_genreField, value) != true)) {
                    this.film_genreField = value;
                    this.RaisePropertyChanged("film_genre");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="film_genre", Namespace="http://schemas.datacontract.org/2004/07/Films.DOL.Model")]
    [System.SerializableAttribute()]
    public partial class film_genre : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FilmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FilmFactory.DataService.film filmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FilmFactory.DataService.genre genreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FilmId {
            get {
                return this.FilmIdField;
            }
            set {
                if ((this.FilmIdField.Equals(value) != true)) {
                    this.FilmIdField = value;
                    this.RaisePropertyChanged("FilmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GenreId {
            get {
                return this.GenreIdField;
            }
            set {
                if ((this.GenreIdField.Equals(value) != true)) {
                    this.GenreIdField = value;
                    this.RaisePropertyChanged("GenreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FilmFactory.DataService.film film {
            get {
                return this.filmField;
            }
            set {
                if ((object.ReferenceEquals(this.filmField, value) != true)) {
                    this.filmField = value;
                    this.RaisePropertyChanged("film");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FilmFactory.DataService.genre genre {
            get {
                return this.genreField;
            }
            set {
                if ((object.ReferenceEquals(this.genreField, value) != true)) {
                    this.genreField = value;
                    this.RaisePropertyChanged("genre");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="genre", Namespace="http://schemas.datacontract.org/2004/07/Films.DOL.Model")]
    [System.SerializableAttribute()]
    public partial class genre : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Genre1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FilmFactory.DataService.film_genre[] film_genreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genre1 {
            get {
                return this.Genre1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Genre1Field, value) != true)) {
                    this.Genre1Field = value;
                    this.RaisePropertyChanged("Genre1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FilmFactory.DataService.film_genre[] film_genre {
            get {
                return this.film_genreField;
            }
            set {
                if ((object.ReferenceEquals(this.film_genreField, value) != true)) {
                    this.film_genreField = value;
                    this.RaisePropertyChanged("film_genre");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IData")]
    public interface IData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/ConnectionTest", ReplyAction="http://tempuri.org/IData/ConnectionTestResponse")]
        string ConnectionTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/ConnectionTest", ReplyAction="http://tempuri.org/IData/ConnectionTestResponse")]
        System.Threading.Tasks.Task<string> ConnectionTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetFilms", ReplyAction="http://tempuri.org/IData/GetFilmsResponse")]
        FilmFactory.DataService.film[] GetFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetFilms", ReplyAction="http://tempuri.org/IData/GetFilmsResponse")]
        System.Threading.Tasks.Task<FilmFactory.DataService.film[]> GetFilmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/AddFilm", ReplyAction="http://tempuri.org/IData/AddFilmResponse")]
        void AddFilm(FilmFactory.DataService.film film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/AddFilm", ReplyAction="http://tempuri.org/IData/AddFilmResponse")]
        System.Threading.Tasks.Task AddFilmAsync(FilmFactory.DataService.film film);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataChannel : FilmFactory.DataService.IData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataClient : System.ServiceModel.ClientBase<FilmFactory.DataService.IData>, FilmFactory.DataService.IData {
        
        public DataClient() {
        }
        
        public DataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ConnectionTest() {
            return base.Channel.ConnectionTest();
        }
        
        public System.Threading.Tasks.Task<string> ConnectionTestAsync() {
            return base.Channel.ConnectionTestAsync();
        }
        
        public FilmFactory.DataService.film[] GetFilms() {
            return base.Channel.GetFilms();
        }
        
        public System.Threading.Tasks.Task<FilmFactory.DataService.film[]> GetFilmsAsync() {
            return base.Channel.GetFilmsAsync();
        }
        
        public void AddFilm(FilmFactory.DataService.film film) {
            base.Channel.AddFilm(film);
        }
        
        public System.Threading.Tasks.Task AddFilmAsync(FilmFactory.DataService.film film) {
            return base.Channel.AddFilmAsync(film);
        }
    }
}
